/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-05-26 12:50:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class gameJS_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("  	<title>Snake Game</title>\n");
      out.write("  </head>\n");
      out.write("\n");
      out.write("  <body>\n");
      out.write("\n");
      out.write("    <div id=\"score\">0</div>\n");
      out.write("    <canvas id=\"snakeboard\" width=\"400\" height=\"400\"></canvas>\n");
      out.write("\n");
      out.write("    <style>\n");
      out.write("      #snakeboard {\n");
      out.write("        position: absolute;\n");
      out.write("        top: 50%;\n");
      out.write("        left: 50%;\n");
      out.write("        transform: translate(-50%, -50%);\n");
      out.write("      }\n");
      out.write("      #score {\n");
      out.write("        text-align: center;\n");
      out.write("        font-size: 140px;\n");
      out.write("      }\n");
      out.write("    </style>\n");
      out.write("  </body>\n");
      out.write("\n");
      out.write("  <script>\n");
      out.write("    const board_border = 'black';\n");
      out.write("    const board_background = \"white\";\n");
      out.write("    const snake_col = 'lightblue';\n");
      out.write("    const snake_border = 'darkblue';\n");
      out.write("\n");
      out.write("    let snake = [\n");
      out.write("      {x: 200, y: 200},\n");
      out.write("      {x: 190, y: 200},\n");
      out.write("      {x: 180, y: 200},\n");
      out.write("      {x: 170, y: 200},\n");
      out.write("      {x: 160, y: 200}\n");
      out.write("    ]\n");
      out.write("\n");
      out.write("    let score = 0;\n");
      out.write("    // True if changing direction\n");
      out.write("    let changing_direction = false;\n");
      out.write("    // Horizontal velocity\n");
      out.write("    let food_x;\n");
      out.write("    let food_y;\n");
      out.write("    let dx = 10;\n");
      out.write("    // Vertical velocity\n");
      out.write("    let dy = 0;\n");
      out.write("\n");
      out.write("\n");
      out.write("    // Get the canvas element\n");
      out.write("    const snakeboard = document.getElementById(\"snakeboard\");\n");
      out.write("    // Return a two dimensional drawing context\n");
      out.write("    const snakeboard_ctx = snakeboard.getContext(\"2d\");\n");
      out.write("    // Start game\n");
      out.write("    main();\n");
      out.write("\n");
      out.write("    gen_food();\n");
      out.write("\n");
      out.write("    document.addEventListener(\"keydown\", change_direction);\n");
      out.write("\n");
      out.write("    // main function called repeatedly to keep the game running\n");
      out.write("    function main() {\n");
      out.write("\n");
      out.write("        if (has_game_ended()) return;\n");
      out.write("\n");
      out.write("        changing_direction = false;\n");
      out.write("        setTimeout(function onTick() {\n");
      out.write("        clear_board();\n");
      out.write("        drawFood();\n");
      out.write("        move_snake();\n");
      out.write("        drawSnake();\n");
      out.write("        // Repeat\n");
      out.write("        main();\n");
      out.write("      }, 100)\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // draw a border around the canvas\n");
      out.write("    function clear_board() {\n");
      out.write("      //  Select the colour to fill the drawing\n");
      out.write("      snakeboard_ctx.fillStyle = board_background;\n");
      out.write("      //  Select the colour for the border of the canvas\n");
      out.write("      snakeboard_ctx.strokestyle = board_border;\n");
      out.write("      // Draw a \"filled\" rectangle to cover the entire canvas\n");
      out.write("      snakeboard_ctx.fillRect(0, 0, snakeboard.width, snakeboard.height);\n");
      out.write("      // Draw a \"border\" around the entire canvas\n");
      out.write("      snakeboard_ctx.strokeRect(0, 0, snakeboard.width, snakeboard.height);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Draw the snake on the canvas\n");
      out.write("    function drawSnake() {\n");
      out.write("      // Draw each part\n");
      out.write("      snake.forEach(drawSnakePart)\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function drawFood() {\n");
      out.write("      snakeboard_ctx.fillStyle = 'lightgreen';\n");
      out.write("      snakeboard_ctx.strokestyle = 'darkgreen';\n");
      out.write("      snakeboard_ctx.fillRect(food_x, food_y, 10, 10);\n");
      out.write("      snakeboard_ctx.strokeRect(food_x, food_y, 10, 10);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Draw one snake part\n");
      out.write("    function drawSnakePart(snakePart) {\n");
      out.write("\n");
      out.write("      // Set the colour of the snake part\n");
      out.write("      snakeboard_ctx.fillStyle = snake_col;\n");
      out.write("      // Set the border colour of the snake part\n");
      out.write("      snakeboard_ctx.strokestyle = snake_border;\n");
      out.write("      // Draw a \"filled\" rectangle to represent the snake part at the coordinates\n");
      out.write("      // the part is located\n");
      out.write("      snakeboard_ctx.fillRect(snakePart.x, snakePart.y, 10, 10);\n");
      out.write("      // Draw a border around the snake part\n");
      out.write("      snakeboard_ctx.strokeRect(snakePart.x, snakePart.y, 10, 10);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function has_game_ended() {\n");
      out.write("      for (let i = 4; i < snake.length; i++) {\n");
      out.write("        if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) return true\n");
      out.write("      }\n");
      out.write("      const hitLeftWall = snake[0].x < 0;\n");
      out.write("      const hitRightWall = snake[0].x > snakeboard.width - 10;\n");
      out.write("      const hitToptWall = snake[0].y < 0;\n");
      out.write("      const hitBottomWall = snake[0].y > snakeboard.height - 10;\n");
      out.write("      return hitLeftWall || hitRightWall || hitToptWall || hitBottomWall\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function random_food(min, max) {\n");
      out.write("      return Math.round((Math.random() * (max-min) + min) / 10) * 10;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function gen_food() {\n");
      out.write("      // Generate a random number the food x-coordinate\n");
      out.write("      food_x = random_food(0, snakeboard.width - 10);\n");
      out.write("      // Generate a random number for the food y-coordinate\n");
      out.write("      food_y = random_food(0, snakeboard.height - 10);\n");
      out.write("      // if the new food location is where the snake currently is, generate a new food location\n");
      out.write("      snake.forEach(function has_snake_eaten_food(part) {\n");
      out.write("        const has_eaten = part.x == food_x && part.y == food_y;\n");
      out.write("        if (has_eaten) gen_food();\n");
      out.write("      });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function change_direction(event) {\n");
      out.write("      const LEFT_KEY = 37;\n");
      out.write("      const RIGHT_KEY = 39;\n");
      out.write("      const UP_KEY = 38;\n");
      out.write("      const DOWN_KEY = 40;\n");
      out.write("\n");
      out.write("    // Prevent the snake from reversing\n");
      out.write("\n");
      out.write("      if (changing_direction) return;\n");
      out.write("      changing_direction = true;\n");
      out.write("      const keyPressed = event.keyCode;\n");
      out.write("      const goingUp = dy === -10;\n");
      out.write("      const goingDown = dy === 10;\n");
      out.write("      const goingRight = dx === 10;\n");
      out.write("      const goingLeft = dx === -10;\n");
      out.write("      if (keyPressed === LEFT_KEY && !goingRight) {\n");
      out.write("        dx = -10;\n");
      out.write("        dy = 0;\n");
      out.write("      }\n");
      out.write("      if (keyPressed === UP_KEY && !goingDown) {\n");
      out.write("        dx = 0;\n");
      out.write("        dy = -10;\n");
      out.write("      }\n");
      out.write("      if (keyPressed === RIGHT_KEY && !goingLeft) {\n");
      out.write("        dx = 10;\n");
      out.write("        dy = 0;\n");
      out.write("      }\n");
      out.write("      if (keyPressed === DOWN_KEY && !goingUp) {\n");
      out.write("        dx = 0;\n");
      out.write("        dy = 10;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function move_snake() {\n");
      out.write("      // Create the new Snake's head\n");
      out.write("      const head = {x: snake[0].x + dx, y: snake[0].y + dy};\n");
      out.write("      // Add the new head to the beginning of snake body\n");
      out.write("      snake.unshift(head);\n");
      out.write("      const has_eaten_food = snake[0].x === food_x && snake[0].y === food_y;\n");
      out.write("      if (has_eaten_food) {\n");
      out.write("        // Increase score\n");
      out.write("        score += 10;\n");
      out.write("        // Display score on screen\n");
      out.write("        document.getElementById('score').innerHTML = score;\n");
      out.write("        // Generate new food location\n");
      out.write("        gen_food();\n");
      out.write("      } else {\n");
      out.write("        // Remove the last part of snake body\n");
      out.write("        snake.pop();\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  </script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
